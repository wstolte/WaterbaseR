mtcars
load(mtcars)
str(mtcars)
require(ggvis)
require(shiny)
str(mtcars)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = unique(cars$gear),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
subset(mtcars, cars$gear < input$gear) %>%
ggvis(~speed, ~dist) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
mtcars %>%
layer_points()
ggvis(~cyl, ~mpg) %>%
mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
require(ggvis)
require(shiny)
str(mtcars)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = unique(cars$gear),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
# subset(mtcars, cars$gear < input$gear) %>%
mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
require(ggvis)
require(shiny)
str(mtcars)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = levels((cars$gear)),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
subset(mtcars, cars$gear < input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
require(ggvis)
require(shiny)
str(mtcars)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = levels((cars$gear)),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
require(ggvis)
require(shiny)
str(mtcars)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = levels(as.factor(cars$gear)),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
levels(as.factor(cars$gear))
require(ggvis)
require(shiny)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = levels(as.factor(mtcars$gear)),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
as.factor(mtcars$gear)
unique(mtcars$gear)
require(ggvis)
require(shiny)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = unique(mtcars$gear),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(..., session) {
vis = reactive(
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
require(ggvis)
require(shiny)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = unique(mtcars$gear),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input, output, session) {
vis = reactive(
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
require(readr)
require(ggvis)
require(shiny)
coll <- read_csv2("DATA/collected-data.csv")
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("location", "Location:",
choices = unique(coll$locatie),
helpText("select location")),
selectInput("substance", "Substance:",
choices = levels(as.factor(coll$waarnemingssoort)),
helpText("select substance")),
sliderInput("interval", "Interval", min = as.numeric(format(min(coll$datum), "%Y")), max = as.numeric(format(max(coll$datum), "%Y")), c(1970, 2014), step = 1, sep = "",
helpText("select time interval"))
),
mainPanel(
verbatimTextOutput(str(coll))
#       ggvisOutput("tp"),
#       uiOutput("tp_ui")
)
),
server = function(input,output,session) {
subdf = reactive(subset(coll, coll$locatie == input$location &
coll$waarnemingssoort == input$substance   &
as.numeric(format(coll$datum, "%Y")) >= input$interval[1] &
as.numeric(format(coll$datum, "%Y")) <= input$interval[2]))
#     subdf = subset(
#       coll,
#       coll$locatie == "Lobith ponton" &
#         coll$waarnemingssoort == "Nitraat in mg/l uitgedrukt in stikstof / na filtratie in oppervlaktewater" #  &
# #         as.numeric(format(coll$datum, "%Y")) >= 1970 &
# #       as.numeric(format(coll$datum, "%Y")) <= 2000
#     )
#     coll %>%
#       ggvis(~datum, ~waarde) %>%
#       layer_points() %>%
#       bind_shiny("tp", "tp_ui")
#     plot <- ggplot(coll, aes(datum, waarde))
#     plot + geom_point(aes()) +
#       facet_grid(waarnemingssoort ~ locatie)
}
))
require(readr)
require(ggvis)
require(shiny)
coll <- read_csv2("DATA/collected-data.csv")
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("location", "Location:",
choices = unique(coll$locatie),
helpText("select location")),
selectInput("substance", "Substance:",
choices = levels(as.factor(coll$waarnemingssoort)),
helpText("select substance")),
sliderInput("interval", "Interval", min = as.numeric(format(min(coll$datum), "%Y")), max = as.numeric(format(max(coll$datum), "%Y")), c(1970, 2014), step = 1, sep = "",
helpText("select time interval"))
),
mainPanel(
verbatimTextOutput(str(coll))
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input,output,session) {
subdf = reactive(subset(coll, coll$locatie == input$location &
coll$waarnemingssoort == input$substance   &
as.numeric(format(coll$datum, "%Y")) >= input$interval[1] &
as.numeric(format(coll$datum, "%Y")) <= input$interval[2]))
#     subdf = subset(
#       coll,
#       coll$locatie == "Lobith ponton" &
#         coll$waarnemingssoort == "Nitraat in mg/l uitgedrukt in stikstof / na filtratie in oppervlaktewater" #  &
# #         as.numeric(format(coll$datum, "%Y")) >= 1970 &
# #       as.numeric(format(coll$datum, "%Y")) <= 2000
#     )
coll %>%
ggvis(~datum, ~waarde) %>%
layer_points() %>%
bind_shiny("tp", "tp_ui")
#     plot <- ggplot(coll, aes(datum, waarde))
#     plot + geom_point(aes()) +
#       facet_grid(waarnemingssoort ~ locatie)
}
))
require(readr)
require(ggvis)
require(shiny)
coll <- read_csv2("DATA/collected-data.csv")
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("location", "Location:",
choices = unique(coll$locatie),
helpText("select location")),
selectInput("substance", "Substance:",
choices = levels(as.factor(coll$waarnemingssoort)),
helpText("select substance")),
sliderInput("interval", "Interval", min = as.numeric(format(min(coll$datum), "%Y")), max = as.numeric(format(max(coll$datum), "%Y")), c(1970, 2014), step = 1, sep = "",
helpText("select time interval"))
),
mainPanel(
verbatimTextOutput(str(coll)),
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input,output,session) {
subdf = reactive(subset(coll, coll$locatie == input$location &
coll$waarnemingssoort == input$substance   &
as.numeric(format(coll$datum, "%Y")) >= input$interval[1] &
as.numeric(format(coll$datum, "%Y")) <= input$interval[2]))
#     subdf = subset(
#       coll,
#       coll$locatie == "Lobith ponton" &
#         coll$waarnemingssoort == "Nitraat in mg/l uitgedrukt in stikstof / na filtratie in oppervlaktewater" #  &
# #         as.numeric(format(coll$datum, "%Y")) >= 1970 &
# #       as.numeric(format(coll$datum, "%Y")) <= 2000
#     )
coll %>%
ggvis(~datum, ~waarde) %>%
layer_points() %>%
bind_shiny("tp", "tp_ui")
#     plot <- ggplot(coll, aes(datum, waarde))
#     plot + geom_point(aes()) +
#       facet_grid(waarnemingssoort ~ locatie)
}
))
require(readr)
require(ggvis)
require(shiny)
coll <- read_csv2("DATA/collected-data.csv")
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("location", "Location:",
choices = unique(coll$locatie),
helpText("select location")),
selectInput("substance", "Substance:",
choices = levels(as.factor(coll$waarnemingssoort)),
helpText("select substance")),
sliderInput("interval", "Interval", min = as.numeric(format(min(coll$datum), "%Y")), max = as.numeric(format(max(coll$datum), "%Y")), c(1970, 2014), step = 1, sep = "",
helpText("select time interval"))
),
mainPanel(
verbatimTextOutput(str(coll)),
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input,output,session) {
subdf = reactive(subset(coll, coll$locatie == input$location &
coll$waarnemingssoort == input$substance   &
as.numeric(format(coll$datum, "%Y")) >= input$interval[1] &
as.numeric(format(coll$datum, "%Y")) <= input$interval[2]))
#     subdf = subset(
#       coll,
#       coll$locatie == "Lobith ponton" &
#         coll$waarnemingssoort == "Nitraat in mg/l uitgedrukt in stikstof / na filtratie in oppervlaktewater" #  &
# #         as.numeric(format(coll$datum, "%Y")) >= 1970 &
# #       as.numeric(format(coll$datum, "%Y")) <= 2000
#     )
subdf %>%
ggvis(~datum, ~waarde) %>%
layer_points() %>%
bind_shiny("tp", "tp_ui")
#     plot <- ggplot(coll, aes(datum, waarde))
#     plot + geom_point(aes()) +
#       facet_grid(waarnemingssoort ~ locatie)
}
))
require(readr)
require(ggvis)
require(shiny)
coll <- read_csv2("DATA/collected-data.csv")
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("location", "Location:",
choices = unique(coll$locatie),
helpText("select location")),
selectInput("substance", "Substance:",
choices = levels(as.factor(coll$waarnemingssoort)),
helpText("select substance")),
sliderInput("interval", "Interval", min = as.numeric(format(min(coll$datum), "%Y")), max = as.numeric(format(max(coll$datum), "%Y")), c(1970, 2014), step = 1, sep = "",
helpText("select time interval"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input,output,session) {
subdf = reactive(subset(coll, coll$locatie == input$location &
coll$waarnemingssoort == input$substance   &
as.numeric(format(coll$datum, "%Y")) >= input$interval[1] &
as.numeric(format(coll$datum, "%Y")) <= input$interval[2]))
#     subdf = subset(
#       coll,
#       coll$locatie == "Lobith ponton" &
#         coll$waarnemingssoort == "Nitraat in mg/l uitgedrukt in stikstof / na filtratie in oppervlaktewater" #  &
# #         as.numeric(format(coll$datum, "%Y")) >= 1970 &
# #       as.numeric(format(coll$datum, "%Y")) <= 2000
#     )
subdf %>%
ggvis(~datum, ~waarde) %>%
layer_points() %>%
bind_shiny("tp", "tp_ui")
#     plot <- ggplot(coll, aes(datum, waarde))
#     plot + geom_point(aes()) +
#       facet_grid(waarnemingssoort ~ locatie)
}
))
require(ggvis)
require(shiny)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = unique(mtcars$gear),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input, output, session) {
vis = reactive(
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
subset(mtcars, cars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
subset(mtcars, cars$gear == 4)
str(mtcars)
require(ggvis)
require(shiny)
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("gear", "Gear: ",
choices = unique(mtcars$gear),
helpText("select number of gears"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input, output, session) {
vis = reactive(
subset(mtcars, mtcars$gear == input$gear) %>%
# mtcars %>%
ggvis(~cyl, ~mpg) %>%
layer_points()
)
vis %>% bind_shiny("tp", "tp_ui")
}
))
source('D:/GitHubClones/WaterbaseR/R/plot-time-series.R', echo=TRUE)
?ggvisOutput
require(readr)
require(ggvis)
require(shiny)
coll <- read_csv2("DATA/collected-data.csv")
runApp(list(
ui = fluidPage(
sidebarPanel(
selectInput("location", "Location:",
choices = unique(coll$locatie),
helpText("select location")),
selectInput("substance", "Substance:",
choices = levels(as.factor(coll$waarnemingssoort)),
helpText("select substance")),
sliderInput("interval", "Interval", min = as.numeric(format(min(coll$datum), "%Y")), max = as.numeric(format(max(coll$datum), "%Y")), c(1970, 2014), step = 1, sep = "",
helpText("select time interval"))
),
mainPanel(
ggvisOutput("tp"),
uiOutput("tp_ui")
)
),
server = function(input,output,session) {
subdf = reactive(subset(coll, coll$locatie == input$location &
coll$waarnemingssoort == input$substance   &
as.numeric(format(coll$datum, "%Y")) >= input$interval[1] &
as.numeric(format(coll$datum, "%Y")) <= input$interval[2]))
subdf %>%
ggvis(~datum, ~waarde) %>%
layer_points() %>%
bind_shiny("tp", "tp_ui")
}
))
?selectInput
source('D:/GitHubClones/WaterbaseR/R/plot-time-series.R', echo=TRUE)
